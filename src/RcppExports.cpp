// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// init_unif_bspline
int init_unif_bspline(arma::vec range, int nknots, int spline_order, bool ind_count);
RcppExport SEXP Functional_init_unif_bspline(SEXP rangeSEXP, SEXP nknotsSEXP, SEXP spline_orderSEXP, SEXP ind_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< int >::type nknots(nknotsSEXP);
    Rcpp::traits::input_parameter< int >::type spline_order(spline_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type ind_count(ind_countSEXP);
    rcpp_result_gen = Rcpp::wrap(init_unif_bspline(range, nknots, spline_order, ind_count));
    return rcpp_result_gen;
END_RCPP
}
// initBspline
int initBspline(int spline_order, arma::vec spline_knots, bool ind_count);
RcppExport SEXP Functional_initBspline(SEXP spline_orderSEXP, SEXP spline_knotsSEXP, SEXP ind_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type spline_order(spline_orderSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type spline_knots(spline_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type ind_count(ind_countSEXP);
    rcpp_result_gen = Rcpp::wrap(initBspline(spline_order, spline_knots, ind_count));
    return rcpp_result_gen;
END_RCPP
}
// initBspline1
int initBspline1(arma::vec spline_knots, bool ind_count);
RcppExport SEXP Functional_initBspline1(SEXP spline_knotsSEXP, SEXP ind_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type spline_knots(spline_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type ind_count(ind_countSEXP);
    rcpp_result_gen = Rcpp::wrap(initBspline1(spline_knots, ind_count));
    return rcpp_result_gen;
END_RCPP
}
// init_fourier_basis
int init_fourier_basis(arma::vec range, int f_order, bool j);
RcppExport SEXP Functional_init_fourier_basis(SEXP rangeSEXP, SEXP f_orderSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< int >::type f_order(f_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(init_fourier_basis(range, f_order, j));
    return rcpp_result_gen;
END_RCPP
}
// init_pol_basis
int init_pol_basis(int deg);
RcppExport SEXP Functional_init_pol_basis(SEXP degSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type deg(degSEXP);
    rcpp_result_gen = Rcpp::wrap(init_pol_basis(deg));
    return rcpp_result_gen;
END_RCPP
}
// getObjectsOnList
Rcpp::IntegerVector getObjectsOnList();
RcppExport SEXP Functional_getObjectsOnList() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getObjectsOnList());
    return rcpp_result_gen;
END_RCPP
}
// emptyList
void emptyList();
RcppExport SEXP Functional_emptyList() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    emptyList();
    return R_NilValue;
END_RCPP
}
// removeMember
bool removeMember(int address);
RcppExport SEXP Functional_removeMember(SEXP addressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    rcpp_result_gen = Rcpp::wrap(removeMember(address));
    return rcpp_result_gen;
END_RCPP
}
// cpp_eval_coefs
arma::vec cpp_eval_coefs(int address, arma::vec x, arma::vec coefs);
RcppExport SEXP Functional_cpp_eval_coefs(SEXP addressSEXP, SEXP xSEXP, SEXP coefsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coefs(coefsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_eval_coefs(address, x, coefs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_eval_0
arma::mat cpp_eval_0(int address, arma::vec x);
RcppExport SEXP Functional_cpp_eval_0(SEXP addressSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_eval_0(address, x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_eval_Dcoefs
arma::vec cpp_eval_Dcoefs(int address, arma::vec x, arma::vec coefs);
RcppExport SEXP Functional_cpp_eval_Dcoefs(SEXP addressSEXP, SEXP xSEXP, SEXP coefsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coefs(coefsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_eval_Dcoefs(address, x, coefs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_eval_D
arma::mat cpp_eval_D(int address, arma::vec x);
RcppExport SEXP Functional_cpp_eval_D(SEXP addressSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_eval_D(address, x));
    return rcpp_result_gen;
END_RCPP
}
// check_if_valid
bool check_if_valid(int address);
RcppExport SEXP Functional_check_if_valid(SEXP addressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type address(addressSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_valid(address));
    return rcpp_result_gen;
END_RCPP
}
